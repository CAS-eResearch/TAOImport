#!/usr/bin/env python
from __future__ import print_function
import argparse, os, sys, pprint, imp, inspect
import numpy as np, tao
from tao.find_modules import find_modules
from tao import Converter

try:
    from mpi4py import MPI
except ImportError:
    MPI = None
    
if __name__ == '__main__':

    # Create the base argumentp arser.
    parser = argparse.ArgumentParser(description='Convert semi-analytic data into TAO format')
    parser.add_argument('-s', '--script', default='taoconv.py', help='script defining conversion (default: taoconv.py)')
    parser.add_argument('-o', '--output', default='output', help='output name')
    parser.add_argument('-i', '--info', action='store_true', help='show information about all fields')
    parser.add_argument('-f', '--field', help='show information about a field')
    parser.add_argument('-d', '--dataset-version', help='an unique identifier for the dataset')

    # Scan for all modules.
    modules = find_modules()
    for mod in modules:
        mod.add_arguments(parser)

    # Try to locate the script. Because we don't want to parse our arguments yet
    # we need to be a little hacky in determining which script to load.
    try:
        idx = sys.argv.index('-s')
    except ValueError:
        try:
            idx = sys.argv.index('--script')
        except ValueError:
            idx = None
    if idx is not None and idx < len(sys.argv) - 1:
        script_fn = sys.argv[idx + 1]
    else:
        script_fn = 'taoconv.py'
    launch_dir = os.getcwd()
    script = os.path.join(launch_dir, script_fn)

    # If the script exists we need to import it before parsing arguments,
    # or even bailing due to it being missing.
    if os.path.exists(script):
        script_mod = imp.load_source('name', script)
        converter_cls = None
        for name, obj in inspect.getmembers(script_mod):
            if inspect.isclass(obj) and obj != Converter and issubclass(obj, Converter):
                converter_cls = obj
                break
        if not converter_cls:
            print('Script does not contain a converter.')
            sys.exit(1)
        converter_cls.add_arguments(parser)

    # Now we can parse command line arguments.
    args = parser.parse_args()

    # Now instantiate the modules.
    modules = [m(args) for m in modules]

    # Check if the user wants information about a field.
    if args.field:
        for mod in modules:
            if mod.disabled:
                continue
            if args.field in mod.fields:
                pprint.pprint({args.field: mod.fields[args.field]})
                sys.exit(0)
        print('Unknown field: {0}'.format(args.field))
        sys.exit(1)

    # Similarly check for information about all fields.
    if args.info:
        all_fields = {}
        for mod in modules:
            if mod.disabled:
                continue
            for field, details in mod.fields.iteritems():
                all_fields[field] = details
        pprint.pprint(all_fields)
        sys.exit(0)

    # Now we can abort if the script is missing.
    if not os.path.exists(script):
        print('Unable to find script: "{0}"'.format(script_fn))
        sys.exit(1)

    if MPI is not None:
        comm = MPI.COMM_WORLD
        # print("In taoconvert: got MPI on rank = {0}".format(comm.rank))
        
    converter = converter_cls(modules, args)
    # print("In taoconvert: got MPI on rank = {0} - setting on converter object"
    #       .format(comm.rank))
    converter.MPI = MPI
    converter.convert()
