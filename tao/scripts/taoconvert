#!/usr/bin/env python
from __future__ import print_function
import argparse, os, sys, pprint, imp, inspect, time
import numpy as np, tao
from tao.find_modules import find_modules
from tao import Converter

try:
    from mpi4py import MPI

    # Replacing the assert within MPI
    # Taken from: http://stackoverflow.com/a/34313363/2237582
    # put this somewhere but before calling the asserts
    sys_excepthook = sys.excepthook
    def mpi_excepthook(type, value, traceback):
        sys_excepthook(type, value, traceback)
        if MPI.COMM_WORLD.size > 1:
            MPI.COMM_WORLD.Abort(1)
    sys.excepthook = mpi_excepthook 

except ImportError:
    MPI = None


    
if __name__ == '__main__':

    # Create the base argument parser.
    parser = argparse.ArgumentParser(description='Convert semi-analytic data into TAO format')
    parser.add_argument('-s', '--script', default='taoconv.py', help='script defining conversion (default: taoconv.py)')
    parser.add_argument('-o', '--output', default='output', help='output name')
    parser.add_argument('-i', '--info', action='store_true', help='show information about all fields')
    parser.add_argument('-f', '--field', help='show information about a field')
    parser.add_argument('-d', '--dataset-version', help='an unique identifier for the dataset')

    # Scan for all modules.
    modules = find_modules()
    for mod in modules:
        mod.add_arguments(parser)

    # Try to locate the script. Because we don't want to parse our arguments yet
    # we need to be a little hacky in determining which script to load.
    try:
        idx = sys.argv.index('-s')
    except ValueError:
        try:
            idx = sys.argv.index('--script')
        except ValueError:
            idx = None
    if idx is not None and idx < len(sys.argv) - 1:
        script_fn = sys.argv[idx + 1]
    else:
        script_fn = 'taoconv.py'
    launch_dir = os.getcwd()
    script = os.path.join(launch_dir, script_fn)

    # If the script exists we need to import it before parsing arguments,
    # or even bailing due to it being missing.
    if os.path.exists(script):
        script_mod = imp.load_source('name', script)
        converter_cls = None
        for name, obj in inspect.getmembers(script_mod):
            if inspect.isclass(obj) and obj != Converter and issubclass(obj, Converter):
                converter_cls = obj
                break
        if not converter_cls:
            print('Script does not contain a converter.')
            sys.exit(1)
        converter_cls.add_arguments(parser)

    tstart = time.time()
    
    # Now we can parse command line arguments.
    args = parser.parse_args()


    # Now instantiate the modules.
    modules = [m(args) for m in modules]

    # Check if the user wants information about a field.
    if args.field:
        for mod in modules:
            if mod.disabled:
                continue
            if args.field in mod.fields:
                pprint.pprint({args.field: mod.fields[args.field]})
                sys.exit(0)
        print('Unknown field: {0}'.format(args.field))
        sys.exit(1)

    # Similarly check for information about all fields.
    if args.info:
        all_fields = {}
        for mod in modules:
            if mod.disabled:
                continue
            for field, details in mod.fields.iteritems():
                all_fields[field] = details
        pprint.pprint(all_fields)
        sys.exit(0)

    # Now we can abort if the script is missing.
    if not os.path.exists(script):
        print('Unable to find script: "{0}"'.format(script_fn))
        sys.exit(1)

    comm = None
    rank = None
    if MPI is not None:
        comm = MPI.COMM_WORLD
        rank = comm.rank
        # print("In taoconvert: got MPI on rank = {0}".format(comm.rank))
        
    converter = converter_cls(modules, args)
    converter.MPI = MPI
    converter.convert()

    if comm is not None:
        comm.Barrier()
        converter.MPI.Finalize()

        
    if rank is None or rank == 0:
        # Taken from http://stackoverflow.com/questions/27779677/python-format-time-elapsed-from-seconds-to-hour-mins-and-sceconds
        def _timer(start,end):
            hours, rem = divmod(end-start, 3600)
            minutes, seconds = divmod(rem, 60)
            telapsed = "{0:0>2}:{1:0>2}:{2:05.2f}".format(int(hours),
                                                          int(minutes),
                                                          seconds)
            return telapsed
        
        time_elapsed = _timer(tstart, time.time())
        print("Finished converting. Time taken = {0} "
              .format(time_elapsed))
    


